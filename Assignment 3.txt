//C++ Assignment 3 by Sahil Kewlani

#include <iostream>
#include <list>
#include <map>
#include <string>
#include<iomanip>

using namespace std;


class course {
public:
	string name;
	int section;
	int credits;
	string grade;
	course() {}
	course(string n, int s, int c, string g) { name = n; section = s; credits = c; grade = g; }
	course(const course& c) { name = c.name; section = c.section; credits = c.credits; grade = c.grade; }


	//You might need to implement some overloaded operators here.

};
//Implement the following functions.
//When adding a student, if the student is already in DB, then ignore the operation.
//When adding a course, if the course is already in DB, then ignore the operation.
//When dropping a course, if the course does not exist, then ignore the operation.
//When removing a student, if the student does not exist, then ignore the operation.
//All courses in a semester need to be sorted.
//When dropping or adding a course, overall GPA, semester GPA, overall credits and semester credits all need to be updated.

//Semeser numbers:  Spring 2019: 20191; Fall 2019: 20192, etc. 

void add_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int id);
void remove_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int id);
void add_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int semester, int id, course c); //20171 Spring semester of 2017; 20172: Fall semester of 2017
																//All courses in the list should be sorted according to name (increasing order)
void drop_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int semester, int id, course c);
void print_student_semester_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int semester, int id);
void print_student_all_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int id);

//Implement additional functions such that you can do
//cout << DB << endl;

//You might need to implement some overloaded operators in the course class.
ostream& operator<<(ostream& str, map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*> DB)
{
	str << "DB:" << endl;
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator im1=DB.begin();
	for(im1=DB.begin();im1!=DB.end();im1++){
	str << "ID: " << im1->first << endl;
	tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* t2 = im1->second;
	str << "Overall GPA: " << setprecision(2) << fixed << get<1>(*t2) << endl;
	str << "Overall Credits: " << get<0>(*t2) << endl;
	map<int, tuple<int, float, list<course*>*> >* m2 = get<2>(*t2);
	map<int, tuple<int, float, list<course*>*> >::iterator itm;
	for (itm = (*m2).begin(); itm != (*m2).end(); itm++) {
		int semester = itm->first;
		str << "Semester: " << semester << endl;
		//tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temp;

		//map<int, tuple<int, float, list<course*>*> >* m1 = get<2>(*temp);
		tuple<int, float, list<course*>*> t1 = itm->second;
		str << "GPA: " << setprecision(2) << fixed << get<1>(t1) << endl;
		str << "Credits: " << get<0>(t1) << endl;
		list<course*>::iterator cit;
		list<course*>* c1 = get<2>(t1);
		for (cit = (*c1).begin(); cit != (*c1).end(); cit++)
		{
			str << "(" << (*cit)->name << " " << (*cit)->section << " " << (*cit)->credits << " " << (*cit)->grade << ") ";
		}
		str << endl;
	}
	}
	str << endl;
	return str;
}

int main() {

	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>  DB;

	add_student(DB, 11111);
	course C1("CIS554", 1, 3, "A-"), C2("CSE674", 1, 3, "B+"), C3("MAT296", 8, 4, "A"), C4("WRT205", 5, 3, "A");

	add_course(DB, 20171, 11111, C4);
	add_course(DB, 20171, 11111, C3);
	add_course(DB, 20171, 11111, C1);
	drop_course(DB, 20171, 11111, C3);
	drop_course(DB, 20171, 11111, C3);
	add_course(DB, 20171, 11111, C1);
	add_course(DB, 20171, 11111, C2);
	print_student_semester_courses(DB, 20171, 11111);

	drop_course(DB, 20171, 11111, C1);
	print_student_semester_courses(DB, 20171, 11111); //sorted according to course name

	course C5("CIS351", 2, 3, "A-"), C6("PSY205", 5, 3, "B+"), C7("MAT331", 2, 3, "A"), C8("ECN203", 4, 3, "A");
	add_course(DB, 20172, 11111, C5);
	add_course(DB, 20172, 11111, C6);
	add_course(DB, 20172, 11111, C7);
	add_course(DB, 20172, 11111, C8);
	add_course(DB, 20172, 11111, C3);
	print_student_all_courses(DB, 11111);//ID GPA

	add_student(DB, 11112);
	add_course(DB, 20171, 11112, C2);
	add_course(DB, 20171, 11112, C5);
	add_course(DB, 20171, 11112, C7);
	add_course(DB, 20171, 11112, C4);
	print_student_semester_courses(DB, 20171, 11112);

	add_course(DB, 20172, 11112, C8);
	add_course(DB, 20172, 11112, C3);
	add_course(DB, 20172, 11112, C5);
	add_course(DB, 20172, 11112, C1);
	print_student_semester_courses(DB, 20172, 11112);

	print_student_all_courses(DB, 11112);
	cout << DB << endl;
	remove_student(DB, 11111);
	remove_student(DB, 11112);
	cout << DB << endl;
	//getchar();
	//getchar();
	return 0;
}

void add_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int id) {
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator it;
	it = DB.find(id);
	if (it == DB.end())
	{
		DB[id] = NULL;
	}

}
void remove_student(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int id) {
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator it;
	it = DB.find(id);
	if (it != DB.end())
	{

		tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* t1 = it->second;
		map<int, tuple<int, float, list<course*>*> >* m1 = get<2>(*t1);
		map<int, tuple<int, float, list<course*>*> >::iterator it1;
		for (it1 = (*m1).begin(); it1 != (*m1).end(); it1++)
		{
			tuple<int, float, list<course*>*> t2 = it1->second;
			list<course*>* l1 = get<2>(t2);
			list<course*>::iterator it2;
			for (it2 = (*l1).begin(); it2 != (*l1).end(); it2++)
			{
				course* c = (*it2);
				delete(c);
			}
			delete(l1);
			//delete(t2);
		}
		delete(m1);
		delete(t1);
		DB.erase(it->first);
	}
	return;
}
int getSemesterCredits(list<course*>* cp)
{
	list<course*> ::iterator it;
	int total = 0;
	for (it = (*cp).begin(); it != cp->end(); it++)
	{
		total += (*it)->credits;
	}
	return total;



}

float getSemesterGPA(list<course*>* cp)
{
	map<string, float> convertMetric = { {"A",4.000}, {"A-",3.667}, {"B+", 3.333}, {"B", 3.000}, {"B-",2.667}, {"C+", 2.333}, {"C", 2.000}, {"C-", 1.667}, {"D", 1.000}, {"D-",0.667}, {"F", 0} };
	list<course*> ::iterator it;
	int totalCredits = 0;
	float semesterGPA = 0;
	for (it = (*cp).begin(); it != cp->end(); it++)
	{
		int courseCredit = (*it)->credits;
		semesterGPA += courseCredit*(convertMetric.find((*it)->grade)->second);
		totalCredits += courseCredit;
	}
	return semesterGPA/totalCredits;



}

bool sort_1(const course *c1, const course *c2)
{
	unsigned int i = 0;
	string first = (*c1).name;
	string second = (*c2).name;
	while ((i < first.length()) && (i < second.length()))
	{
		if (tolower(first[i]) < tolower(second[i])) return true;
		else if (tolower(first[i]) > tolower(second[i])) return false;
		++i;
	}
	return (first.length() < second.length());



}
int getOverallCredits(map<int, tuple<int, float, list<course*>*> > m1)
{
	int total = 0;
	map<int, tuple<int, float, list<course*>*> >::iterator it1;
	for (it1 = m1.begin(); it1 != m1.end(); it1++)
	{
		total += get<0>(it1->second);
		
		
	}
	return total;
}

float getOverallGPA(map<int, tuple<int, float, list<course*>*> > m1)
{
	float total = 0;
	int total_credits = 0;
	map<int, tuple<int, float, list<course*>*> >::iterator it1;
	for (it1 = m1.begin(); it1 != m1.end(); it1++)
	{
		total_credits += (get<0>(it1->second));
		total += (get<0>(it1->second))*(get<1>(it1->second));

	}
	return (total/(total_credits));
}
void add_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int semester, int id, course c) {
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator it;
	it = DB.find(id);
	tuple<int, float, map<int, tuple<int, float, list<course*>*> >*> *temp;
	if (it == DB.end())
	{
		//cout << "Error";
		return;
		//exit(1);
	}
	else
	{
		temp = it->second;
	}
	
	if (temp == nullptr)
	{
	
		tuple<int, float, list<course*>*> *temp2 = new tuple<int, float, list<course*>*>;
		course* cp = new course(c);
		list<course*> *templist = new list<course*>{ cp };
		(*templist).sort(sort_1);
		*temp2 = (make_tuple(getSemesterCredits(templist), getSemesterGPA(templist), templist));
		map<int, tuple<int, float, list<course*>*> >(*tempmap) = new map<int, tuple<int, float, list<course*>*> >;
		(*tempmap)[semester]= *temp2;
		//(*tempmap)[semester] = temp2;
		tuple<int, float, map<int, tuple<int, float, list<course*>*> >*> *temptuple = new tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>;
		*temptuple = (make_tuple(getOverallCredits(*tempmap), getOverallGPA(*tempmap), (tempmap)));
		DB[id] = temptuple;
	}
	else 
	{
		map<int, tuple<int, float, list<course*>*> > *tempmap = new map<int, tuple<int, float, list<course*>*> >;
		tempmap = get<2>(*temp);
		//map<int, tuple<int, float, list<course*>*> >::iterator it2;
		tuple<int, float, list<course*>*> *temp2 = new tuple<int, float, list<course*>*>;
		//it2 = (*tempmap).find(semester);
		//cout << (*tempmap).begin()->first;
		auto it2 = (*tempmap).begin();	
		for (it2; it2 != (*tempmap).end(); it2++)
		{
			if (it2->first == semester)
				break;
		}
		//it = *tempmap.find(semester);
		course* cp = new course(c);
		if (it2 == (*tempmap).end())
		{
			list<course*> *templist = new list<course*> { cp };
			(*templist).sort(sort_1);
			*temp2 = (make_tuple(getSemesterCredits(templist), getSemesterGPA(templist), templist));
			(*tempmap)[semester] = *temp2;
			tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temptuple = new tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>;
			*temptuple = (make_tuple(getOverallCredits(*tempmap), getOverallGPA(*tempmap), (tempmap)));
			DB[id] = temptuple;
		}
		else
		{
			*temp2 = (*tempmap)[semester];
			list<course*>* templist = get<2>(*temp2);
			list<course*> ::iterator it3;
			bool found = false;
			for (it3 = (*templist).begin(); it3 != (*templist).end(); it3++)
			{
				if (((*it3))->name.compare( (*cp).name)==0)
				{
					found = true;
					break;
				}

			}
			if (!found)
			{
				(*templist).push_back(cp);
				(*templist).sort(sort_1);
				//cout<<endl <<"found : " << getSemesterCredits(templist)<<endl;
				*temp2 = (make_tuple(getSemesterCredits(templist), getSemesterGPA(templist), templist));
				(*tempmap)[semester] = *temp2;
				tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temptuple = new tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>;
				*temptuple = (make_tuple(getOverallCredits(*tempmap), getOverallGPA(*tempmap), (tempmap)));
				DB[id] = temptuple;
				//get<0>(*temp2) = getSemesterCredits(templist);
				//cout << get<0>(*temp2);
				//get<1>(*temp2) = getSemesterGPA(templist);
			}
		
		}
		
	}

	
	/*course* cp = &c;
	list<course*> :: iterator it3;
	bool found = false;
	//if (!find((*templist).begin(), (*templist).end(), c))
	//{
	//	(*templist).push_back(cp);
	//}
	for (it3 = (*templist).begin(); it3 != (*templist).end(); it3++)
	{
		if (*it3 == cp)
		{
			found = true;
			break;
		}

	}
	if (!found)
	{
		(*templist).push_back(cp);
		}
		*/


}

void drop_course(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int semester, int id, course c) {

	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator it;
	it = DB.find(id);
	tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temp;
	if (it == DB.end())
	{
		//cout << "Error";
		return;
		//exit(1);
	}
	else
	{
		temp = it->second;
	}
	if (temp == NULL) {
		delete(temp);
		return;
	}

	map<int, tuple<int, float, list<course*>*> >* map1 = get<2>(*temp);
	auto it2 = (*map1).find(semester);
	if (it2 == ((*map1).end()))
	{
		return;
	}

	tuple<int, float, list<course*>*>* t1 = new tuple<int, float, list<course*>*>;
	*t1 = (*map1)[semester];
	course* cp = new course{ c };
	list<course*>* templist = get<2>(*t1);
	list<course*> ::iterator it3;
	for (it3 = (*templist).begin(); it3 != (*templist).end(); it3++)
	{
		if (((*it3))->name.compare((*cp).name) == 0)
		{
			(*templist).remove(*it3);
			*t1 = (make_tuple(getSemesterCredits(templist), getSemesterGPA(templist), templist));
			(*map1)[semester] = *t1;
			tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temptuple = new tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>;
			tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temptuple2 = DB[id];
			delete(temptuple2);
			*temptuple = (make_tuple(getOverallCredits(*map1), getOverallGPA(*map1), (map1)));
			DB[id] = temptuple;
			break;
		}

	}
	delete(cp);
	if ((*templist).empty())
		delete(templist);
	if ((get<2>(*t1)==nullptr))
	{
		delete(t1);
	
	}
	if ((*map1).empty())
	{
		delete(map1);
	}
	if (get<2>(*temp) == nullptr)
	{
		delete(temp);
	}


}

void print_student_semester_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int semester, int id) {
	cout << "ID: " << id<<endl;
	cout << "Semester: " << semester << endl;
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator it;
	it = DB.find(id);
	tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temp;
	if (it == DB.end())
	{
		return;
	}
	else
	{
		temp = it->second;
	}
	map<int, tuple<int, float, list<course*>*> >* m1 = get<2>(*temp);
	tuple<int, float, list<course*>*> t1 = (*m1)[semester];
	cout << "GPA: " <<setprecision(2)<<fixed<< get<1>(t1)<<endl;
	cout << "Credits: " << get<0>(t1)<<endl;
	list<course*>::iterator cit;
	list<course*>* c1 = get<2>(t1);
	for (cit = (*c1).begin(); cit != (*c1).end(); cit++)
	{
		cout << "(" << (*cit)->name << " " << (*cit)->section << " " << (*cit)->credits << " " << (*cit)->grade << ") ";
	}
	cout << endl<<endl;
}
void print_student_all_courses(map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>& DB, int id) {
	cout << "ID: " << id << endl;
	
	map<int, tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>*>::iterator it;
	it = DB.find(id);
	if (it == DB.end())
	{
		return;
	}
	tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* t2 = it->second;
	cout << "Overall GPA: " << setprecision(2) << fixed << get<1>(*t2) << endl;
	cout << "Overall Credits: " << get<0>(*t2) << endl;
	map<int, tuple<int, float, list<course*>*> >* m2 = get<2>(*t2);
	map<int, tuple<int, float, list<course*>*> >::iterator itm;
	for (itm = (*m2).begin(); itm != (*m2).end(); itm++) {
		int semester = itm->first;
		cout << "Semester: " << semester << endl;
		tuple<int, float, map<int, tuple<int, float, list<course*>*> >*>* temp;

		//map<int, tuple<int, float, list<course*>*> >* m1 = get<2>(*temp);
		tuple<int, float, list<course*>*> t1 = itm->second;
		cout << "GPA: " << setprecision(2) << fixed << get<1>(t1) << endl;
		cout << "Credits: " << get<0>(t1) << endl;
		list<course*>::iterator cit;
		list<course*>* c1 = get<2>(t1);
		for (cit = (*c1).begin(); cit != (*c1).end(); cit++)
		{
			cout << "(" << (*cit)->name << " " << (*cit)->section << " " << (*cit)->credits << " " << (*cit)->grade << ") ";
		}
		cout << endl;
	}
	cout << endl;

}
//C++ Assignment 6 by Sahil Kewlani
#include <iostream>
#include <memory>
using namespace std;
template <typename T> class Node { //Your T has to support either int or float
public:
	shared_ptr<T> pValue; //pValue is a pointer to an object of type T
	shared_ptr<Node<T>> row_next;//Points to the next node in the same row
	shared_ptr<Node<T>> col_next;//Points to the nexe node in the same col
	Node() {}
	Node(T v) { pValue = make_shared<T>(v); }// pValue.reset(new T(v)); will also work,but slower
};

template <typename T> class Ring2D {
public:
	shared_ptr<Node<T>> head;//Points to the node at first row and first column
	Ring2D() {};

	//Implement the following functions:
	Ring2D(const initializer_list<T>& I); //initializer_list 
	/*
	the first two number in the initializer_list will be number of rows and number of columns
	followed by values in each row
	For example, for  3 4  1 2 3 4  5 6 7 8  9 10 11 12: 3 rows and 4 columns; first row: to 1 2 3 4;
	second row: 5 6 7 8; third row 9 10 11 12
	*/
	~Ring2D();//destructor; whenever possible, you should do minimum work.



	Ring2D(const Ring2D<T>& R);//copy constructor
void operator=(const Ring2D<T>& R);//Lvalue operator=; copy assignment
	Ring2D(Ring2D<T>&& R);//move constructor
	void operator=(Ring2D<T>&& R);//Rvalue operator=; move assignment
	Ring2D<T> ThreeTimes();//Return a Ring2D with values being three times of the current Ring2D

	void DeleteRow(int r);//Delete row r of Ring2D
	//If r is out of range, simply do nothing and return.

};

template <typename T> Ring2D<T>::Ring2D(const initializer_list<T>& I)
{
	auto it1 = I.begin();
	int rc = *it1;
	it1++;
	int cc = *it1;
	
	shared_ptr<Node<T>> p2, head1, p3, p1;
	it1 = I.end() - 1;
	for (int i = rc; i > 0; i--)
	{
		if (i != rc)
			head1 = p2;
		for (int j = cc; j > 0; j--)
		{
			
			p1 = make_shared<Node<T>>(*it1);
			p1->row_next = head;
			head = p1;
			if (j == cc) p2 = p1;
			it1--;
		}
		if (i == rc)
			p3 = head;
		p2->row_next = head;
		if (i == rc)
			continue;
		head1 = head1->row_next;
		for(int j=0;j<cc;j++)
		{
			p1->col_next = head1;
			p1 = p1->row_next;
			head1 = head1->row_next;
		}
		
	}
	p1 = head;
	for (int j = 0; j < cc; j++)
	{
		p3->col_next = p1;
		p1 = p1->row_next;
		p3 = p3->row_next;
	}
	cout << "Initializer_list" << endl;
}
template <class T> Ring2D<T>::~Ring2D() { //destructor
	if (!head) {
		cout << "Destructor" << endl;
		return;
	}
	shared_ptr<Node<T>> p2, p1,head1;
	head1 = head;
	p1 = head;
	p2 = p1->col_next;
	p1->col_next.reset();
	p1 = p1->row_next;
	while (p1 != head)
	{
		p1->col_next.reset();
		p1 = p1->row_next;
	}
	p1->row_next.reset();
	p1 = p2;
	while (p1 != head)
	{
		head1 = p1;
		p2 = p1->col_next;
		p1->col_next.reset();
		p1 = p1->row_next;
		while (p1 != head1)
		{
			p1->col_next.reset();
			p1 = p1->row_next;
		}
		p1->row_next.reset();
		p1 = p2;

	}
	cout << "Destructor" << endl;
}
template<class T> Ring2D<T>::Ring2D(const Ring2D<T>& R) { //copy constructor
	if (!R.head)
		return;
	shared_ptr<Node<T>> p1, p2,p3, p4, head1, head2,pp1;
	head = make_shared<Node<T>>(*R.head->pValue);
	p1 = head;
	p2 = R.head;
	head2 = R.head;
	head1 = head;
	do {
		p2 = p2->row_next;
		do {
			p3 = make_shared<Node<T>>(*p2->pValue);

			p1->row_next = p3;
			p1 = p3;
			if (pp1)
			{
				pp1->col_next = p1;
				pp1 = pp1->row_next;
			}
			p2 = p2->row_next;
		} while (p2 != head2);
			head2 = head2->col_next;
			p1->row_next = head1;
		p1 = p1->row_next;
		p2 = p2->col_next;
		head1 = make_shared<Node<T>>(*p2->pValue);
		p1->col_next = head1;
		if (p2 == R.head)
			p4 = p1;
		pp1 = p1->row_next;
		p1 = p1->col_next;
		
	
	}while(p2!=R.head);
	head1 = head;
	do {
		p4->col_next = head1;
		head1 = head1->row_next;
		p4 = p4->row_next;
	
	} while (head1!=head);
	cout << "Copy Constructor" << endl;

}
template<class T> void Ring2D<T>::operator=(const Ring2D<T>& R) { //Lvalue assignment
	if (head) {
		shared_ptr<Node<T>> p2, p1, head1;
		head1 = head;
		p1 = head;
		p2 = p1->col_next;
		p1->col_next.reset();
		p1 = p1->row_next;
		while (p1 != head)
		{
			p1->col_next.reset();
			p1 = p1->row_next;
		}
		p1->row_next.reset();
		p1 = p2;
		while (p1 != head)
		{
			head1 = p1;
			p2 = p1->col_next;
			p1->col_next.reset();
			p1 = p1->row_next;
			while (p1 != head1)
			{
				p1->col_next.reset();
				p1 = p1->row_next;
			}
			p1->row_next.reset();
			p1 = p2;

		}
		head.reset();
	}
	shared_ptr<Node<T>> p1, p2, p3, p4, head1, head2, pp1;
	head = make_shared<Node<T>>(*R.head->pValue);
	p1 = head;
	p2 = R.head;
	head2 = R.head;
	head1 = head;
	do {
		p2 = p2->row_next;
		do {
			p3 = make_shared<Node<T>>(*p2->pValue);

			p1->row_next = p3;
			p1 = p3;
			if (pp1)
			{
				pp1->col_next = p1;
				pp1 = pp1->row_next;
			}
			p2 = p2->row_next;
		} while (p2 != head2);
		head2 = head2->col_next;
		p1->row_next = head1;
		p1 = p1->row_next;
		p2 = p2->col_next;
		head1 = make_shared<Node<T>>(*p2->pValue);
		p1->col_next = head1;
		if (p2 == R.head)
			p4 = p1;
		pp1 = p1->row_next;
		p1 = p1->col_next;


	} while (p2 != R.head);
	head1 = head;
	do {
		p4->col_next = head1;
		head1 = head1->row_next;
		p4 = p4->row_next;

	} while (head1 != head);
	cout << "Copy Assignment" << endl;

}

template<class T> Ring2D<T>::Ring2D(Ring2D<T>&& R)  {//Move constructor
	head = R.head;
	R.head.reset();

	cout << "Move Constructor" << endl;
}
template<class T> void Ring2D<T>::operator=(Ring2D<T>&& R)  {//Rvalue assignment; move assignment
	if (head) {
		shared_ptr<Node<T>> p2, p1, head1;
		head1 = head;
		p1 = head;
		p2 = p1->col_next;
		p1->col_next.reset();
		p1 = p1->row_next;
		while (p1 != head)
		{
			p1->col_next.reset();
			p1 = p1->row_next;
		}
		p1->row_next.reset();
		p1 = p2;
		while (p1 != head)
		{
			head1 = p1;
			p2 = p1->col_next;
			p1->col_next.reset();
			p1 = p1->row_next;
			while (p1 != head1)
			{
				p1->col_next.reset();
				p1 = p1->row_next;
			}
			p1->row_next.reset();
			p1 = p2;

		}
		head.reset();
	}
	head = R.head;
	R.head.reset();
	cout << "Move Assignment" << endl;
}
template<class T> Ring2D<T> Ring2D<T>::ThreeTimes() {
	Ring2D<T> temp = *this;// copy consturctor
	if (!head) return temp;
	shared_ptr<Node<T>> p1 = temp.head, p2;
	p2 = p1->row_next;
	while (p2 != temp.head) {
		p2 = p1->row_next;
		while (p2 != p1) {
			*p2->pValue *= 3;
			p2 = p2->row_next;
		}
		p1 = p1->col_next;
		*(p1->pValue) *= 3;
		p2 = p2->col_next;
	}
	return temp;
}

template<class T> void Ring2D<T>::DeleteRow(int r) {
	if (!head)
		return;
	shared_ptr<Node<T>> p1 = head,pp1;
	int counter = 1;
	while (counter != r)
	{
		pp1 = p1;
		p1 = p1->col_next;
		if (p1 == head)
			return;
		counter++;
	}
	if (counter == 1)
	{
		if (head->col_next == head)
		{
			p1->col_next.reset();
			p1 = p1->row_next;
			while (p1 != head) {
				p1->col_next.reset();
				p1 = p1->row_next;
			}
			head->row_next.reset();
			head.reset();
			return;
		}
		while (p1->col_next != head)
			p1 = p1->col_next;
		shared_ptr<Node<T>> p2 = head;
		p1->col_next = p2->col_next;
		p2 = p2->row_next;
		p1 = p1->row_next;
		while (p2 != head)
		{
			p1->col_next = p2->col_next;
			p2 = p2->row_next;
			p1 = p1->row_next;

		}
		head = p2->col_next;
		p2->row_next.reset();
		p2.reset();
	}
	else
	{
		shared_ptr<Node<T>> p2 = pp1;
		p2->col_next = p1->col_next;
		p2 = p2->row_next;
		p1 = p1->row_next;
		while (p2 != pp1)
		{
			p2->col_next = p1->col_next;
			p2 = p2->row_next;
			p1 = p1->row_next;

		}
		p1->row_next.reset();
		p1.reset();


	}
	

}

template <typename T> ostream& operator<<(ostream& str, const Ring2D<T>& r) {
	if (!r.head)
		return str;
	shared_ptr<Node<T>> h1, h2;
	h1 = r.head;
	do {
		h2 = h1;
		do {
			str << *h2->pValue << " ";
			h2 = h2->row_next;

		} while (h2 != h1);
		str << "\n";


		h1 = h1->col_next;
	} while (h1 != r.head);
	return str;
}
/*
Implement the needed overloaded operater<< such that you can do cout <<Ring2D<T> instance.
For the example described in the above initializer_list, you output should look like:
1 2 3 4
5 6 7 8
9 10 11 12
*/


/*
Print: "Copy Constructor", "Move Constructor", "Copy Assignment", "Move Assignment", "Destructor" when leaving
the corresponding functions --  the same way I did for Lecture on Ring (3/31/2020).


*/


int main() {
	Ring2D<int> R1{ 3, 4,  1, 2, 3, 4,  5, 6, 7, 8,  9, 10, 11, 12 };//initializer_list
	cout << R1 << endl << endl;
	//Ring2D<float> R8{ 3.2, 4.9,  1.2, 2.3, 3.2, 4.5,  5.2, 6.3, 7.4, 8.2,  9.1, 10.2, 11.2, 12.2 };//initializer_list
	//cout << R8.ThreeTimes() << endl << endl;

	Ring2D<int> R2{ R1 };//copy constructor
	cout << R2 << endl << endl;

	Ring2D<int> R3;
	R3 = R1;//copy assignment
	cout << R3 << endl << endl;

	Ring2D<int> R4;
	R4 = R1.ThreeTimes();//this is pointing to object R1
	//Compiler will convert it to R4.operator=(R1.ThreeTimes());
	//copy constructor -- declare temp and initialize it to R1
	//move constructor -- create hidden (temporary) copy
	//destructor-- delete temp becuase it goes out of scope
	//move assignment -- Assign value from hidden copy to R4
	//destructor-- delete hedden copy because it goes out of scope
	cout << R4 << endl << endl;


	R4.DeleteRow(2);
	cout << R4 << endl << endl;
	R4.DeleteRow(2);
	cout << R4 << endl << endl;
	R4.DeleteRow(1);
	cout << R4 << endl << endl;

	return 0;
}